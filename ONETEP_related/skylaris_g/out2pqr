#!/bin/bash

##########################################################################################
# Takes a onetep .out file and produces a pqr file containing the nuclei deduced from
# the .out file. Information on pseudopotentials is also gathered, allowing for the
# determination of corresponding charges and ionic radii
##########################################################################################
# v1.0, 2009.10.26 jd: initial version 
# v1.1, 2009.10.29 jd: removed O(Nspecies) complexity factor
# v1.2, 2009.10.29 jd: coordinates now correctly written out in A, not Bohr
# v1.3, 2009.11.04 jd: major bug in charge ordering fixed
# v1.4, 2010.03.23 jd: added Bondi radii for Cl and Ag
ver="1.4"
ang2bohr=1.889726313
##########################################################################################


echo
echo "*** out2pqr v$ver. Converts a onetep output file (.out) to a pqr file."
echo "                  2009.10 Jacek Dziedzic, jack.erede@gmail.com"
echo


if [ $# -ne 1 ]; then
  echo "Supply one argument -- name of a onetep standard output file (.out). Aborting!" >&2
  exit 101
fi

f=$1

if [ ! -r "$f" ]; then
  echo "$f not readable. Aborting!" >&2
  exit 102
fi

# --------------------------------------------------------------------------------------------
# extract charges from ONETEP output
# --------------------------------------------------------------------------------------------

# Find the speciespot block in the input file (lines: n1..n2)
n1=`cat $f | grep -n "^%block speciespot" | tr ":" "\n" | head -n 1`
n2=`cat $f | grep -n "^%endblock speciespot" | tr ":" "\n" | head -n 1`
if [ -z "$n1" ] || [ -z "$n2" ]; then
  echo "'%block speciespot' or '%endblock speciespot' not found in '$f'." >&2
  echo "Make sure '$f' is a onetep standard output file (.out) and that VERBOSE is on." >&2
  echo "Aborting!" >&2
  exit 103
fi
let "n1++"
let "n2--"

table1="\$table_species"
table2="\$table_charges"
table3="\$table_species_charges"

# Extract it to a temp file
cat $f | sed -n "$n1,$n2 p" >$table1
Nspecies=`wc -l $table1 | awk '{print $1}'`

echo "--- Species: ---" >&2
cat $table1 >&2
echo "... for a total of $Nspecies species." >&2

# For every recpot in there find the relevant line that contains the associated charge
relevantlines=`cat $table1 | awk -v f="$f" '{system("cat " f "| grep -n " $2 "| grep File")}' | sed "s/:F/ /" | awk '{print $1+1}'`

# Get these lines from the output file
rm -f $table2
for i in $relevantlines; do
  echo $i
  cat $f | awk -v line=$i 'NR==line {print $6}' >>$table2
done
Ncharges=`wc -l $table2 | awk '{print $1}'`

# Sanity check
if [ $Nspecies -ne $Ncharges ]; then
  echo "Mismatch between the number of species ($Nspecies) and number of charges ($Ncharges)." >&2
  echo "Charges extracted: " >&2
  cat $table2 >&2
  echo "Aborting!" >&2
  exit 104
fi

# Paste all together into a neat table
paste $table1 $table2 | awk '{print $1,$2,$3}' >$table3
rm -f $table1
rm -f $table2

echo "--- Species and associated charges: ---" >&2
cat $table3 >&2
echo


# --------------------------------------------------------------------------------------------
# Extract atomic positions from ONETEP output
# --------------------------------------------------------------------------------------------
n1=`cat $f | grep -n "^%block positionsabs" | tr ":" "\n" | head -n 1`
n2=`cat $f | grep -n "^%endblock positionsabs" | tr ":" "\n" | head -n 1`
if [ -z "$n1" ] || [ -z "$n2" ]; then
  echo "'%block positionsabs' or '%endblock positionsabs' not found in '$f'." >&2
  echo "Make sure '$f' is a onetep standard output file (.out) and that VERBOSE is on." >&2
  echo "Aborting!" >&2
  exit 105
fi
let "n1++"
let "n2--"

table4="\$table_atoms"

# Place these into a temp file
cat $f | sed -n "$n1,$n2 p" >$table4
Nat=`wc -l $table4 | awk '{print $1}'`

echo "$Nat atoms found in the onetep output file"
echo

fprefix=${f%.*}
fpqr="$fprefix"".pqr"

# Build a pqr file from that
echo "REMARK   1                     PDB file generated by out2pqr          " >$fpqr

# Parse the charge information, this in the form "H 1.000 C 4.000 O 6.000 ..."
chargedata=`cat $table3 | sed "s/ .*recpot//" | tr "\n" " "`


rm -f current_charge
cat $table4 | awk -v chargedata="$chargedata" -v ang2bohr=$ang2bohr '
                                          BEGIN {
                                            split(chargedata,charge_arr," "); 
					  }
					  
					  function chargeof(name) {
                                            for(i in charge_arr) if(charge_arr[i]==name) return charge_arr[i+1];
					  }
					  
				          { printf(".") > "/dev/stderr";
                                            atname=$1; 
                                            # --- Knowing the atom name, find the corresponding entry in the charge table ---
                                            atcharge=chargeof(atname);
					    # -------------------------------------------------------------------------------
					    # Use sort-of-Bondi radii, as prescribed by leap source.
					    # also cf. http://www.teokem.lu.se/~ulf/Methods/molsurf.html
                                            radii["N"]=1.55+0.0;
                                            radii["H"]=1.2+0.0;
					    radii["C"]=1.7+0.0;
					    radii["O"]=1.5+0.0;
					    radii["P"]=1.8+0.0;
					    radii["S"]=1.8+0.0;
					    radii["FE"]=1.3+0.0;
					    radii["Na+"]=1.2+0.0;
					    radii["Cl-"]=1.7+0.0;
					    radii["MG"]=1.18+0.0;
					    radii["Ag"]=1.72+0.0;
					    radii["Cl"]=1.70+0.0;
					    # -------------------------------------------------------------------------------
					    if(atname in radii) {
					      printf("ATOM %6d  %-2s  XXX     1     %7.3f %7.3f %7.3f %4.2f %4.2f\n",NR,$1,$2/ang2bohr,$3/ang2bohr,$4/ang2bohr,atcharge,radii[atname]);
					    }
					    else {
					      print "Atomic species ",atname," not recognized. Update the table in out2pqr. Aborting!" > "/dev/stderr";
					      exit(109);
					    }
		   }' >>$fpqr

rm -f $table1 $table2 $table3 $table4

echo 
echo "Done!" >&2
rm -f current_charge
