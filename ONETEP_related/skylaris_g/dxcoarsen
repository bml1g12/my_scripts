#!/bin/bash
##########################################################################################
# dxcoarsen -- Extracts every n-th point from a .dx file
#
# v1.00 2011.06.13 jd, first version
##########################################################################################
##########################################################################################
ver="1.00"
##########################################################################################

improper_invocation() {
  echo "Improper invocation. Supply two arguments -- the name of the input .dx file and the coarsening factor (integer).">&2
  exit 101
}

echo >&2
echo "*** dxcoarsen v$ver. Scales the data in a .dx file."           >&2
echo "                     2011.06 Jacek Dziedzic, jack.erede@gmail.com"   >&2
echo >&2

if [ $# -ne 2 ]; then
  improper_invocation
fi 

f="$1"
scale="$2"

check=`echo $scale | awk '{if($1>=1 && ! ($1 ~ "\\\\.")) print "OK"}'`

if [ "$check" != "OK" ]; then
  echo "Improper coarsening factor. Please supply a positive integer." >&2
  exit 102
fi

trailer="\$trailer"
outf="coarse.dx"

echo "Coarsening $f by a factor of $scale." >&2


# Determine x,y,z counts
nx=`head -n 100 $f | grep "counts" | head -n 1 | tr " " "\n" | tail -n 3 | head -n 1`
ny=`head -n 100 $f | grep "counts" | head -n 1 | tr " " "\n" | tail -n 2 | head -n 1`
nz=`head -n 100 $f | grep "counts" | head -n 1 | tr " " "\n" | tail -n 1`

echo "Number of divisions in source: $nx $ny $nz" >&2
ncx=`echo $nx $scale | awk 'function floor(x) {r=int(x); if(r>x) r--; return r} {res=floor($1/$2); if($1 % $2 > 0) res++; print res}'`
ncy=`echo $ny $scale | awk 'function floor(x) {r=int(x); if(r>x) r--; return r} {res=floor($1/$2); if($1 % $2 > 0) res++; print res}'`
ncz=`echo $nz $scale | awk 'function floor(x) {r=int(x); if(r>x) r--; return r} {res=floor($1/$2); if($1 % $2 > 0) res++; print res}'`
echo "Number of divisions in destination: $ncx $ncy $ncz" >&2

remainder=`echo $nx $scale | awk '{print ($1+1) % $2}'`
if [ $remainder -ne 0 ]; then
  echo "NB: Number of divisions +1 along X is not divisible by $scale, last $remainder divisions in source will be chopped."
fi
remainder=`echo $ny $scale | awk '{print ($1+1) % $2}'`
if [ $remainder -ne 0 ]; then
  echo "NB: Number of divisions +1 along Y is not divisible by $scale, last $remainder divisions in source will be chopped."
fi
remainder=`echo $nz $scale | awk '{print ($1+1) % $2}'`
if [ $remainder -ne 0 ]; then
  echo "NB: Number of divisions +1 along Z is not divisible by $scale, last $remainder divisions in source will be chopped."
fi

# Determine deltas
dx=`head -n 100 $f | grep "delta" | head -n 1 |             awk '{print $2}'` 
dy=`head -n 100 $f | grep "delta" | head -n 2 | tail -n 1 | awk '{print $3}'`
dz=`head -n 100 $f | grep "delta" | head -n 3 | tail -n 1 | awk '{print $4}'`
echo "Grid deltas in source: $dx $dy $dz" >&2
dcx=`echo $dx $scale | awk '{print $1*$2}'`
dcy=`echo $dy $scale | awk '{print $1*$2}'`
dcz=`echo $dz $scale | awk '{print $1*$2}'`
echo "Grid deltas in destination: $dcx $dcy $dcz" >&2

# Copy comments to output
head -n 100 $f | grep "\#" >$outf

# Add own comment
echo "# dxcoarsened with a factor of $scale" >>$outf

# Output new line with counts
echo "object 1 class gridpositions counts $ncx $ncy $ncz" >>$outf

# Copy original origin line
head -n 100 $f | grep -v "\#" | grep origin >>$outf

# Output new deltas
echo $dcx $dcy $dcz | awk '{printf("delta %13.6e %13.6e %13.6e\ndelta %13.6e %13.6e %13.6e\ndelta %13.6e %13.6e %13.6e\n",$1,0,0,0,$2,0,0,0,$3)}' >>$outf

# Output new line with counts
echo "object 1 class gridconnections counts $ncx $ncy $ncz" >>$outf

# Output new line with datacount
echo "object 3 class array type double rank 0 items `echo $ncx $ncy $ncz | awk '{print $1*$2*$3}'` data follows" >>$outf

# extract data, pick relevant values, output
cat $f | grep -E "^ *[0-9-]" | awk -v f=$scale -v nx=$nx -v ny=$ny -v nz=$nz '
  BEGIN {
    pos = 1
  }
  {
    for(i=1;i<=NF;++i) {
      n = (NR-1)*3 + i-1 # 0-based
      x = n % nx
      y = (n-x) % (nx*ny) / nx
      z = (n-x-y*nx) / (nx*ny)

      if((x % f == 0) && (y % f == 0) && (z % f == 0)) {
        printf("%13.6e ",$i)
        pos++
        if(pos==4) {    # output newlines after every 3 values written out
          printf("\n")
          pos=1
        }
      }
    }
    if(n%100000 == 0) {
      printf(".") > "/dev/stderr"
    }
  }
  END{
    if(pos != 1) printf("\n")
  }' >>$outf

# output trailer
echo attribute \"dep\" string \"positions\" >>$outf
echo object \"regular positions regular connections\" class field >>$outf
echo component \"positions\" value 1 >>$outf
echo component \"connections\" value 2 >>$outf
echo component \"data\" value 3 >>$outf
echo >>$outf
echo end >>$outf
