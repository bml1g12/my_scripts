#!/bin/bash

######################################################
# Displays simple stats for a ONETEP MD run.
# 2011.10.27. Jacek Dziedzic, jack.erede@gmail.com
######################################################
# v1.10
######################################################

# ----------------------------------------------
abort() {
  echo "Aborting!" >&2
  exit 1
}

# ----------------------------------------------
ensure_existence() {
  which $testf >/dev/null 2>/dev/null; result=$?
  if [ $result -eq 1 ]; then
    echo "Cannot locate '$testf' (a required dependency) in the PATH. Please fix this." >&2
    abort
  fi
}

# ----------------------------------------------
# main() 
# ----------------------------------------------
tmp="/tmp/\$md2thermo.`whoami`"
if [ $# -ne 1 ]; then
  echo "Improper invocation. Supply one parameter -- the name of the .md file." >&2
  abort
fi

f=$1

if [ ! -r $f ]; then
  echo "$f does not exist or is unreadable." >&2
  abort
fi

# Make sure the auxiliary scripts are available.
myroot=`dirname $0`
PATH=$PATH:.:$myroot # Allow for the auxiliary scripts to be put in current dir or where the script resides or in PATH.
testf="getcol"; ensure_existence;
testf="getline"; ensure_existence;
testf="findmin"; ensure_existence;
testf="findmax"; ensure_existence;
testf="findavg"; ensure_existence;
testf="findrmsavg"; ensure_existence;
testf="findabsmax"; ensure_existence;
testf="findstddev"; ensure_existence;
testf="format_as"; ensure_existence;
testf="linear_fit"; ensure_existence;

# Extract data from the .md file into a file called 'thermo', formatted as follows:
# time [fs], T [K], Epot [Ha], Ekin [Ha], Etot [Ha]
cat $f | awk -v f="$f" '
{
  prevcol1=col1; col1=$1;
  if($0 ~ "- E") {
    time=prevcol1;
    Epot=$1;
    Etot=$2;
    Ekin=$3;
  }
  if($0 ~ "- T") {
    temp=$1;
    printf("%7.2f %10.4f %14.8e %14.8e %14.8e\n",time,temp,Epot,Ekin,Etot) > "thermo";
    counter++;
  }
}
END{
  printf("\n%d timesteps have been processed in %s.\n",counter,f);
}'

# Find out number of steps
nsteps=`cat thermo | wc -l`

if [ $nsteps -lt 2 ]; then
  echo "Your simulation must have completed at least two steps for you to obtain meaningful data." >&2
  abort
fi

# Find out the timestep
t2=`getline thermo 2 | getcol 1`
t1=`getline thermo 1 | getcol 1`
timestep=`echo $t1 $t2 | awk '{print $2-$1}'`

# Find out initial and final total energy
E0=`head -n 1 thermo | getcol 5`
E1=`tail -n 1 thermo | getcol 5`

# Calculate some averages
echo -e "\n--- SIMULATION TIME ---"
echo "start: `head -n 1 thermo | getcol 1` fs, finish: `tail -n 1 thermo | getcol 1` fs, $nsteps steps, timestep: $timestep fs."

echo -e "\n--- TEMPERATURE ---"
echo "average: `cat thermo | getcol 2 | findavg | getcol 1 | format_as %9.4f` K (std. dev. `cat thermo | getcol 2 | findstddev | getcol 1 | format_as %.4f` K)."
echo "minimum: `tail -n +2 thermo | getcol 2 | findmin | getcol 1 | format_as %9.4f` K `tail -n +2 thermo | getcol 2 | findmin | getcol 4 | awk -v dt=$timestep '{printf("@%.1f fs (step %d)", $1*dt,$1)}'`."
echo "maximum: `tail -n +2 thermo | getcol 2 | findmax | getcol 1 | format_as %9.4f` K `tail -n +2 thermo | getcol 2 | findmax | getcol 4 | awk -v dt=$timestep '{printf("@%.1f fs (step %d)", $1*dt,$1)}'`."

echo -e "\n--- POTENTIAL ENERGY ---"
echo "average: `cat thermo | getcol 3 | findavg | getcol 1 | format_as %9.4f` Ha (std. dev. `cat thermo | getcol 3 | findstddev | getcol 1 | format_as %.4f` Ha)."
echo "minimum: `tail -n +2 thermo | getcol 3 | findmin | getcol 1 | format_as %9.4f` Ha `tail -n +2 thermo | getcol 3 | findmin | getcol 4 | awk -v dt=$timestep '{printf("@%.1f fs (step %d)", $1*dt,$1)}'`."
echo "maximum: `tail -n +2 thermo | getcol 3 | findmax | getcol 1 | format_as %9.4f` Ha `tail -n +2 thermo | getcol 3 | findmax | getcol 4 | awk -v dt=$timestep '{printf("@%.1f fs (step %d)", $1*dt,$1)}'`."

echo -e "\n--- KINETIC ENERGY ---"
echo "average: `cat thermo | getcol 4 | findavg | getcol 1 | format_as %9.4f` Ha (std. dev. `cat thermo | getcol 4 | findstddev | getcol 1 | format_as %.4f` Ha)."
echo "minimum: `tail -n +2 thermo | getcol 4 | findmin | getcol 1 | format_as %9.4f` Ha `tail -n +2 thermo | getcol 4 | findmin | getcol 4 | awk -v dt=$timestep '{printf("@%.1f fs (step %d)", $1*dt,$1)}'`."
echo "maximum: `tail -n +2 thermo | getcol 4 | findmax | getcol 1 | format_as %9.4f` Ha `tail -n +2 thermo | getcol 4 | findmax | getcol 4 | awk -v dt=$timestep '{printf("@%.1f fs (step %d)", $1*dt,$1)}'`."

echo -e "\n--- TOTAL ENERGY ---"
echo "average: `cat thermo | getcol 5 | findavg | getcol 1 | format_as %9.4f` Ha (std. dev. `cat thermo | getcol 5 | findstddev | getcol 1 | format_as %.4f` Ha)."
echo "minimum: `tail -n +2 thermo | getcol 5 | findmin | getcol 1 | format_as %9.4f` Ha `tail -n +2 thermo | getcol 5 | findmin | getcol 4 | awk -v dt=$timestep '{printf("@%.1f fs (step %d)", $1*dt,$1)}'`."
echo "maximum: `tail -n +2 thermo | getcol 5 | findmax | getcol 1 | format_as %9.4f` Ha `tail -n +2 thermo | getcol 5 | findmax | getcol 4 | awk -v dt=$timestep '{printf("@%.1f fs (step %d)", $1*dt,$1)}'`."

# Calculate dEtot/Etot
cat thermo | awk '{Eprev=E; E=$5; if(NR>1) {print (E-Eprev)/E;}}' >$tmp

echo -e "\n--- TOTAL ENERGY CONSERVATION --- "
echo "rms instantaneous |dE/E|: `cat $tmp | findrmsavg | getcol 1 | format_as %9.2e`."
echo "max instantaneous |dE/E|: `cat $tmp | findabsmax | getcol 1 | format_as %9.2e` `cat $tmp | findabsmax | getcol 4 | awk -v dt=$timestep '{printf("@%.1f-%.1f fs (steps %d-%d)", ($1-1)*dt,$1*dt,$1-1,$1)}'`."

# Calculate a linear fit to Etot=f(t)
getcol thermo 1 >"$tmp".t
getcol thermo 5 >"$tmp".E
paste "$tmp".t "$tmp".E > "$tmp".tE
E_of_t_slope=`linear_fit "$tmp".tE | getline /dev/stdin 1 | getcol 2 | format_as %9.2e`

echo "Long-term energy drift:   $E_of_t_slope Ha/fs == `echo $E_of_t_slope $E0 | awk '{printf("%9.2e %/fs.",$1/$2*100.0)}'`"

# `echo $E0 $E1 $t1 $t2 $nsteps | awk '{dE_over_dt=($2-$1)/($4*$5-$3*$5); printf("%9.2e Ha/fs == %9.2e %/fs",dE_over_dt,100.0*dE_over_dt/($1*$5))}'`."

echo -e "\nA rough guide to expected degree of energy conservation for NVE runs:"
echo "  rms |dE/E|: 1E-7 & below: VERY GOOD, 1E-7 to 5E-7: GOOD, 5E-7 to 2E-6: DECENT, 2E-6 to 1E-5: POOR, 1E-5 & above: BROKEN."
echo "  max |dE/E|: Multiply the above values by 3-5, roughly."
echo "  Long-term energy drift: <1E-7 %/s: VERY GOOD, ~2E-7 %/fs: GOOD, ~2E-6 %/fs DECENT, ~2E-5 %/fs POOR, ~1E-4 %/fs & above: BROKEN."

rm -f $tmp $tmp.t $tmp.E $tmp.tE
